import json
from typing import Any, Dict, List
from unittest.mock import Mock, patch

import pytest
from pandas import DataFrame

from src.services import (
    analysis_of_cashback_categories,
    investment_bank,
    simple_search,
    sort_by_phone_numbers,
    transfer_to_individuals,
)


@patch("pandas.read_excel")
def test_analysis_of_cashback_categories(mock_reader: Mock) -> None:
    mock_reader.return_value = DataFrame(
        [
            {
                "Дата операции": "31.01.2019 13:34:15",
                "Дата платежа": "31.01.2019",
                "Номер карты": "",
                "Статус": "OK",
                "Сумма операции": -35.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -35.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Мобильная связь",
                "MCC": "",
                "Описание": "Teletie Бизнес +7 966 000-00-00",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 35.0,
            },
            {
                "Дата операции": "30.01.2019 20:34:24",
                "Дата платежа": "01.02.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -97.8,
                "Валюта операции": "RUB",
                "Сумма платежа": -97.8,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Супермаркеты",
                "MCC": 5411.0,
                "Описание": "SPAR",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 97.8,
            },
        ]
    )
    assert analysis_of_cashback_categories(f"{mock_reader.return_value}", "2019", "1") == json.dumps(
        {"Мобильная связь": 0, "Супермаркеты": 1}, ensure_ascii=False, indent=4
    )


@pytest.mark.parametrize(
    "operation, invest_amount",
    [
        (
            [
                {
                    "Дата операции": "29.09.2021 16:04:18",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -6.96,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -488.59,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Одежда и обувь",
                    "MCC": 5641.0,
                    "Описание": "Varaviksne-veikals",
                    "Бонусы (включая кэшбэк)": 9,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 488.59,
                },
                {
                    "Дата операции": "29.09.2021 15:58:01",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -28.29,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -1985.96,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Одежда и обувь",
                    "MCC": 5641.0,
                    "Описание": "Varaviksne-veikals",
                    "Бонусы (включая кэшбэк)": 39,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 1985.96,
                },
                {
                    "Дата операции": "29.09.2021 11:08:52",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -22.43,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -1574.59,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Супермаркеты",
                    "MCC": 5411.0,
                    "Описание": "Rimi Hm Gramzdas",
                    "Бонусы (включая кэшбэк)": 31,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 1574.59,
                },
            ],
            92.32,
        ),
        (
            [
                {
                    "Дата операции": "29.09.2021 16:04:18",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -6.96,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -488.59,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Одежда и обувь",
                    "MCC": 5641.0,
                    "Описание": "Varaviksne-veikals",
                    "Бонусы (включая кэшбэк)": 9,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 488.59,
                },
                {
                    "Дата операции": "29.09.2021 15:58:01",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -2810.29,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -1985.96,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Одежда и обувь",
                    "MCC": 5641.0,
                    "Описание": "Varaviksne-veikals",
                    "Бонусы (включая кэшбэк)": 39,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 15.96,
                },
                {
                    "Дата операции": "29.09.2021 11:08:52",
                    "Дата платежа": "29.09.2021",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -200.43,
                    "Валюта операции": "EUR",
                    "Сумма платежа": -1574.59,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Супермаркеты",
                    "MCC": 5411.0,
                    "Описание": "Rimi Hm Gramzdas",
                    "Бонусы (включая кэшбэк)": 31,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 1574.59,
                },
            ],
            132.32000000000002,
        ),
    ],
)
def test_investment_bank(operation: List[Dict[str, Any]], invest_amount: float) -> None:
    assert investment_bank("2021-09", operation, 50) == invest_amount


@patch("pandas.read_excel")
def test_simple_search(mock_reader: Mock) -> None:
    mock_reader.return_value = DataFrame(
        [
            {
                "Дата операции": "12.03.2019 17:27:35",
                "Дата платежа": "15.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -127.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -127.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Транспорт",
                "MCC": 4121.0,
                "Описание": "Яндекс Такси",
                "Бонусы (включая кэшбэк)": 2,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 127.0,
            },
            {
                "Дата операции": "12.03.2019 16:51:05",
                "Дата платежа": "13.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -55.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -55.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Образование",
                "MCC": 8220.0,
                "Описание": "СПбПУ",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 55.0,
            },
        ]
    )
    assert simple_search("Такси") == json.dumps(
        [
            {
                "Дата операции": "12.03.2019 17:27:35",
                "Дата платежа": "15.03.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -127.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -127.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Транспорт",
                "MCC": 4121.0,
                "Описание": "Яндекс Такси",
                "Бонусы (включая кэшбэк)": 2,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 127.0,
            }
        ],
        ensure_ascii=False,
        indent=4,
    )


@patch("pandas.read_excel")
def test_transfer_to_individuals(mock_reader: Mock) -> None:
    mock_reader.return_value = DataFrame(
        [
            {
                "Дата операции": "12.04.2019 10:49:07",
                "Дата платежа": "12.04.2019",
                "Номер карты": "",
                "Статус": "OK",
                "Сумма операции": -3400.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -3400.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Переводы",
                "MCC": "",
                "Описание": "Екатерина В.",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 3400.0,
            },
            {
                "Дата операции": "12.04.2019 09:56:16",
                "Дата платежа": "15.04.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -149.9,
                "Валюта операции": "RUB",
                "Сумма платежа": -149.9,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Супермаркеты",
                "MCC": 5411.0,
                "Описание": "SPAR",
                "Бонусы (включая кэшбэк)": 2,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 149.9,
            },
        ]
    )
    assert transfer_to_individuals() == json.dumps(
        [
            {
                "Дата операции": "12.04.2019 10:49:07",
                "Дата платежа": "12.04.2019",
                "Номер карты": "",
                "Статус": "OK",
                "Сумма операции": -3400.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -3400.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Переводы",
                "MCC": "",
                "Описание": "Екатерина В.",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 3400.0,
            }
        ],
        ensure_ascii=False,
        indent=4,
    )


@pytest.fixture
def transactions() -> list[list[dict]]:
    return [
        [
            {
                "Дата операции": "31.01.2019 13:34:15",
                "Дата платежа": "31.01.2019",
                "Номер карты": "",
                "Статус": "OK",
                "Сумма операции": -35.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -35.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Мобильная связь",
                "MCC": "",
                "Описание": "Teletie Бизнес +7 966 000-00-00",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 35.0,
            },
            {
                "Дата операции": "30.01.2019 20:34:24",
                "Дата платежа": "01.02.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -97.8,
                "Валюта операции": "RUB",
                "Сумма платежа": -97.8,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Супермаркеты",
                "MCC": 5411.0,
                "Описание": "SPAR",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 97.8,
            },
            {
                "Дата операции": "31.01.2019 13:34:15",
                "Дата платежа": "31.01.2019",
                "Номер карты": "",
                "Статус": "OK",
                "Сумма операции": -35.0,
                "Валюта операции": "RUB",
                "Сумма платежа": -35.0,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Мобильная связь",
                "MCC": "",
                "Описание": "Teletie Бизнес +7 966 000-00-00",
                "Бонусы (включая кэшбэк)": 0,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 35.0,
            },
            {
                "Дата операции": "30.01.2019 20:34:24",
                "Дата платежа": "01.02.2019",
                "Номер карты": "*7197",
                "Статус": "OK",
                "Сумма операции": -97.8,
                "Валюта операции": "RUB",
                "Сумма платежа": -97.8,
                "Валюта платежа": "RUB",
                "Кэшбэк": "",
                "Категория": "Мобильная связь",
                "MCC": 5411.0,
                "Описание": "Teletie Бизнес +7 966 567-00-89",
                "Бонусы (включая кэшбэк)": 1,
                "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 97.8,
            },
        ]
    ]


@patch("pandas.read_excel")
def test_sort_by_phone_numbers(mock_reader: Mock, transactions: list[dict]) -> None:
    examination = []
    for transaction in transactions:
        mock_reader.return_value = DataFrame(transaction)
        examination.append(sort_by_phone_numbers())
    format_object = [
        json.dumps(
            [
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "31.01.2019 13:34:15",
                    "Дата платежа": "31.01.2019",
                    "Номер карты": "",
                    "Статус": "OK",
                    "Сумма операции": -35.0,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -35.0,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": "",
                    "Описание": "Teletie Бизнес +7 966 000-00-00",
                    "Бонусы (включая кэшбэк)": 0,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 35.0,
                },
                {
                    "Дата операции": "30.01.2019 20:34:24",
                    "Дата платежа": "01.02.2019",
                    "Номер карты": "*7197",
                    "Статус": "OK",
                    "Сумма операции": -97.8,
                    "Валюта операции": "RUB",
                    "Сумма платежа": -97.8,
                    "Валюта платежа": "RUB",
                    "Кэшбэк": "",
                    "Категория": "Мобильная связь",
                    "MCC": 5411.0,
                    "Описание": "Teletie Бизнес +7 966 567-00-89",
                    "Бонусы (включая кэшбэк)": 1,
                    "Округление на инвесткопилку": 0,
                    "Сумма операции с округлением": 97.8,
                },
            ],
            ensure_ascii=False,
            indent=4,
        )
    ]
    assert examination == format_object
